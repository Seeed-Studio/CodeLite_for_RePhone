/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005-2015
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

#ifndef VMRES_SDK_H
#define	VMRES_SDK_H

#ifdef __cplusplus
extern "C" {
#endif

#include "vmtype.h"

/* Module Overview

The resource module allows developers to retrieve resources embedded in the VXP
application or other resource files. Developers may embed strings, images and
audio data into VXP or resource files with the ResourceEditor tool in SDK.

Resources are identified by resource IDs, which are also generated by the
ResourceEditor tool.

The are two sets of APIs to retrieve resources.

The first is to load resources embedded in the current VXP application.
<code>
// The developer must first initializes the resource first.
vm_res_init(0);

const VMWSTR text = vm_res_get_string(string_id);
// There is no need to delete string after usage.

const void* image_data = vm_res_get_image(image_id);

// images and audios must be released with vm_res_delete after usage.
vm_res_delete(image_id);

vm_res_release();
// Accessing resource data pointers after calling vm_res_deinit() results
// in undefined behavior.
</code>

And the second set of APIs allows loading resources from specified resource
file. The user has to provide memory buffers for retrieved data.
Since the buffer is mamanged by user, there is no need to call vm_res_delete().

*/

/* Detailed result code for resource APIs */
typedef enum
{
    VM_RES_SUCCESS = VM_OK,
    VM_RES_ERROR_OUT_OF_MEMORY = -1,      /* There is not enough memory to load
                                             resources. */
    VM_RES_ERROR_INVALID_PARAMETERS = -2, /* Incorrect input parameter,
                                             e.g. illegal resource id. */
    VM_RES_ERROR_ITEM_NOT_FOUND = -3,     /* Resource id not found, or failed
                                             to open the resource file.*/
    VM_RES_RESULT_MAX = 0x7FFFFFFF
} VM_RES_RESULT;

/*****************************************************************************
 * FUNCTION
 *  vm_res_init
 * DESCRIPTION
 *  Call this function prior to any other resource APIs.
 *  This function initializes the resource module, and load language-specific
 *  string data in memory.
 * PARAMETERS
 *  language_id: [IN] A language id used to specific which string table in
 *  the resource file to be loaded. Pass 0 for English. For other languages,
 *  the actual numbers are described the ResEditor tool, or in the generated
 *  ref_list.txt, e.g. Spanish(34) shows that by passing 34 to language_id,
 *  the strings in the column of Spanish are loaded.
 *
 * RETURNS
 *  VM_SUCCESS if successful. For error results, refer to VM_RES_RESULT.
 *****************************************************************************/
VM_RESULT vm_res_init(VMUINT32 language_id);

/*****************************************************************************
 * FUNCTION
 *  vm_res_release
 * DESCRIPTION
 *  Release all resource and free all memory occupied.
 *  Note that any resource pointers retrieved prior to this function call
 *  become invalid. Accessing these resources after vm_res_release()
 *  results in undefined behavior.
 * RETURNS
 *  VM_SUCCESS if successful. For error results, refer to VM_RES_RESULT.
 *****************************************************************************/
VM_RESULT vm_res_release(void);

/*****************************************************************************
 * FUNCTION
 *  vm_res_delete
 * DESCRIPTION
 *  Release resources allocated by a specific resource ID after calling
 *  resource loading APIs, e.g. vm_res_get_image(), vm_res_get_audio(),
 *  and vm_res_get_binary().
 *
 * PARAMETERS
 *  id: [IN] ID of the resource. This can be any kind of resource. Note that
 *           although this function accepts string resource ID, the string
 *           table is always kept in memory until vm_res_release() is called.
 * RETURNS
 *  VM_RES_SUCCESS if successful,
 *  VM_RES_ITEM_NOT_FOUND if annot find the resource ID.
 *****************************************************************************/
VM_RESULT vm_res_delete(VMUINT32 id);


/*****************************************************************************
 * FUNCTION
 *  vm_res_get_image
 * DESCRIPTION
 *  Load and get image data according to resource ID. The buffer is allocated
 *  by resource module and vm_res_delete() must be called when it is no longer
 *  used.
 * PARAMETERS
 *  image_id:  [IN] Resource ID of the image data.
 *  size :     [OUT] The size of the returning buffer, in bytes.
 * RETURNS
 *  Pointer to the buffer containing image data. This buffer is maintained by
 *  resource module and should not be written. Call vm_res_delete() to
 *  release this buffer.
 *  NULL is returned if the ID is invalid.
 *****************************************************************************/
void* vm_res_get_image(VMUINT32 image_id, VMUINT32* size);

/*****************************************************************************
 * FUNCTION
 *  vm_res_get_audio
 * DESCRIPTION
 *  Load and get audio data according to resource ID. The buffer is allocated
 *  by resource module and vm_res_delete() must be called when it is no longer
 *  used.
 * PARAMETERS
 *  audio_id:  [IN] Resource ID of the audio data.
 *  size :     [OUT] The size of the returning buffer, in bytes.
 * RETURNS
 *  Pointer to the buffer containing audio data. This buffer is maintained by
 *  resource module and should not be written. Call vm_res_delete() to
 *  release this buffer.
 *  NULL is returned if the ID is invalid.
 *****************************************************************************/
void* vm_res_get_audio(VMUINT32 audio_id, VMUINT32* size);

/*****************************************************************************
 * FUNCTION
 *  vm_res_get_binary
 * DESCRIPTION
 *  Load and get binary data according to resource ID. The buffer is allocated
 *  by resource module and vm_res_delete() must be called when it is no longer
 *  used.
 * PARAMETERS
 *  binary_id:  [IN] Resource ID of the binary data.
 *  size :      [OUT] The size of the returning buffer, in bytes.
 * RETURNS
 *  Pointer to the buffer containing audio data. This buffer is maintained by
 *  resource module and should not be written. Call vm_res_delete() to
 *  release this buffer.
 *  NULL is returned if the ID is invalid.
 *****************************************************************************/
void* vm_res_get_binary(VMUINT32 binary_id, VMUINT32* size);

/*****************************************************************************
 * FUNCTION
 *  vm_res_get_string
 * DESCRIPTION
 *  Get string by its resource ID. If there are multiple languages defined
 *  in the string table, the language passed to vm_res_init() will be used.
 * PARAMETERS
 *  string_id: [IN] ID of the string.
 *  size:      [OUT] The size of the returning buffer, in bytes, including the
 *                   terminating NULL.
 * RETURNS
 *  NULL-terminated WCHAR string corresponding to the resource ID.
 *  NULL is returned if the ID is invalid.
 *****************************************************************************/
VMWSTR vm_res_get_string(VMUINT32 string_id, VMUINT32* size);

#ifdef __cplusplus
}
#endif

#endif /* VMRES_SDK_H */

